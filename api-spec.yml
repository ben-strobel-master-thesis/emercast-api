openapi: 3.0.3
info:
  title: Emercast API Specification
  version: "1.0"
  description: Emercast API
servers:
  - url: http://localhost:8080/api/v1
security:
  - bearerAuth: []
paths:
  /broadcastMessage:
    post:
      summary: Create a new broadcast message
      operationId: postBroadcastMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - forwardUntil
                - latitude
                - longitude
                - radius
                - category
                - severity
                - title
                - message
                - imageUrl
              properties:
                forwardUntil:
                  type: string
                  format: date-time
                latitude:
                  type: number
                  format: float
                longitude:
                  type: number
                  format: float
                radius:
                  type: integer
                category:
                  type: string
                severity:
                  type: integer
                title:
                  type: string
                message:
                  type: string
                imageUrl:
                  type: string
      responses:
        200:
          $ref: '#/components/responses/BroadcastMessageResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
    get:
      summary: Get a page of broadcastMessages
      operationId: getBroadcastMessagesPage
      security: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            format: int32
          required: true
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
          required: true
        - in: query
          name: systemMessage
          schema:
            type: boolean
          required: true
      responses:
        200:
          $ref: '#/components/responses/BroadcastMessageListResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
  /broadcastMessage/hash:
    get:
      summary: Get hash of broadcastMessage chain
      operationId: getBroadcastMessageChainHash
      security: []
      parameters:
        - in: query
          name: systemMessage
          schema:
            type: boolean
          required: true
      responses:
        200:
          $ref: '#/components/responses/HashResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
  /login:
    post:
      summary: Login as an authority
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - loginName
                - password
              properties:
                loginName:
                  type: string
                password:
                  type: string
      responses:
        200:
          $ref: '#/components/responses/LoginResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
  /authority:
    post:
      summary: Create a new authority
      operationId: createNewAuthority
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - loginName
                - password
                - publicName
                - jurisdictionDescription
                - jurisdictionMarkers
              properties:
                loginName:
                  type: string
                password:
                  type: string
                publicName:
                  type: string
                jurisdictionDescription:
                  type: string
                jurisdictionMarkers:
                  type: array
                  items:
                    $ref: '#/components/schemas/JurisdictionMarkerDTO'
      responses:
        200:
          $ref: '#/components/responses/AuthorityResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/ForbiddenResponse'
    get:
      summary: Get an authority
      operationId: getAuthority
      responses:
        200:
          $ref: '#/components/responses/AuthorityResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
  /authorities:
        get:
          summary: Get a page of authorities
          operationId: getAuthorityPage
          parameters:
            - in: query
              name: page
              schema:
                type: integer
                format: int32
                minimum: 0
              required: true
            - in: query
              name: pageSize
              schema:
                type: integer
                format: int32
                maximum: 20
              required: true
          responses:
            200:
              $ref: '#/components/responses/AuthorityListResponse'
            404:
              $ref: '#/components/responses/NotFoundResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    SystemBroadcastMessagePayloadDTO:
      type: object
      properties:
        issuedPayload:
          $ref: '#/components/schemas/SystemBroadcastMessageAuthorityIssuedPayloadDTO'
        revokedPayload:
          $ref: '#/components/schemas/SystemBroadcastMessageAuthorityIssuedPayloadDTO'
    SystemBroadcastMessageAuthorityRevokedPayloadDTO:
      type: object
      required:
        - authorityId
        - revokedDate
        - canBeDeletedAt
      properties:
        authorityId:
          type: string
          format: uuid
        revokedDate:
          type: integer
          format: int64
        canBeDeletedAt:
          type: integer
          format: int64
    SystemBroadcastMessageAuthorityIssuedPayloadDTO:
      type: object
      required:
        - authority
      properties:
        authority:
          $ref: '#/components/schemas/AuthorityDTO'
    BroadcastMessageDTO:
      type: object
      required:
        - id
        - created
        - systemMessage
        - forwardUntil
        - latitude
        - longitude
        - radius
        - category
        - severity
        - title
        - message
        - imageUrl
        - issuedAuthority
        - issuerSignature
      properties:
        id:
          type: string
          format: uuid
        created:
          type: integer
          format: int64
        systemMessage:
          type: boolean
        forwardUntil:
          type: integer
          format: int64
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        radius:
          type: integer
        category:
          type: string
        severity:
          type: integer
        title:
          type: string
        message:
          type: string
        imageUrl:
          type: string
        issuedAuthority:
          type: string
          format: uuid
        issuerSignature:
          type: string
        responsePublicKey:
          type: string
    BroadcastReplyDTO:
      type: object
      required:
        - id
        - created
        - messageId
      properties:
        id:
          type: string
          format: uuid
        messageId:
          type: string
          format: uuid
        created:
          type: string
          format: date-time
        forwardUntil:
          type: string
          format: date-time
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        message:
          type: string
    AuthorityDTO:
      type: object
      required:
        - id
        - created
        - createdBy
        - publicName
        - jurisdictionMarkers
        - keyPairValidUntil
        - publicKeyBase64
      properties:
        id:
          type: string
          format: uuid
        created:
          type: integer
          format: int64
        createdBy:
          type: string
          format: uuid
        publicName:
          type: string
        jurisdictionMarkers:
          type: array
          items:
            $ref: '#/components/schemas/JurisdictionMarkerDTO'
        keyPairValidUntil:
          type: integer
          format: int64
        publicKeyBase64:
          type: string
    JurisdictionMarkerDTO:
      type: object
      required:
        - latitude
        - longitude
        - kind
        - radiusMeter
      properties:
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        kind:
          $ref: '#/components/schemas/JurisdictionMarkerKindEnumDTO'
        radiusMeter:
          type: integer
          format: int32
    JurisdictionMarkerKindEnumDTO:
      type: string
      enum:
        - CIRCLE
    ErrorDTO:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  responses:
    AuthorityListResponse:
      description: Response containing a list of authorities
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AuthorityDTO"
    AuthorityResponse:
      description: Response containing an authority
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthorityDTO"
    LoginResponse:
      description: Login response
      content:
        application/json:
          schema:
            type: object
            required:
              - authorityId
              - token
            properties:
              authorityId:
                type: string
                format: uuid
              token:
                type: string
    HashResponse:
      description: Response containing a hash
      content:
        application/json:
          schema:
            type: object
            required:
              - hash
            properties:
              hash:
                type: string
    BroadcastMessageResponse:
      description: Response containing a broadcast message
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BroadcastMessageDTO"
    BroadcastMessageListResponse:
      description: Response containing a list of broadcast message
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/BroadcastMessageDTO"
    EmptyResponse:
      description: Empty response
    BadRequestResponse:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
          example:
            code: 400
            message: Bad request
    ForbiddenResponse:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
          example:
            code: 401
            message: Forbidden
    UnauthorizedResponse:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
          example:
            code: 403
            message: Unauthorized
    NotFoundResponse:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
          example:
            code: 404
            message: Not found
    AlreadyExistsResponse:
      description: The resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
          example:
            code: 409
            message: Already Exists
    UnprocessableEntityResponse:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
          example:
            code: 422
            message: Unproccessable Entity